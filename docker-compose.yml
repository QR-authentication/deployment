version: '3.8'

services:
  frontend:
    image: nginx:alpine
    container_name: frontend
    ports:
      - "80:80"
      - "8443:443"
    restart: always
    depends_on:
      - gateway-service
      - graphite
    env_file:
      - ../.env
    volumes:
      - ../front/templates:/usr/share/nginx/html
      - ../front/static:/usr/share/nginx/html/static
      - ../front/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../certs:/etc/nginx/ssl
    networks:
      - qr_net

  gateway-service:
    container_name: gateway-service
    build:
      context: ../gateway-service
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
    env_file:
      - ../.env
    restart: always
    depends_on:
      - graphite
    networks:
      - qr_net

  qr-service:
    container_name: qr-service
    build:
      context: ../qr-service
    ports:
      - "${QR_SERVICE_PORT}:${QR_SERVICE_PORT}"
    env_file:
      - ../.env
    restart: always
    depends_on:
      - qr-service-db
      - graphite
    networks:
      - qr_net

  auth-service:
    container_name: auth-service
    build:
      context: ../auth-service
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    env_file:
      - ../.env
    restart: always
    depends_on:
      - auth-service-db
      - graphite
    networks:
      - qr_net

  qr-service-db:
    image: postgres:latest
    container_name: qr-service-db
    environment:
      POSTGRES_USER: ${QR_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${QR_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${QR_SERVICE_POSTGRES_DB}
      PGPORT: ${QR_SERVICE_POSTGRES_PORT}
    env_file:
      - ../.env
    restart: always
    ports:
      - "${QR_SERVICE_POSTGRES_PORT}:${QR_SERVICE_POSTGRES_PORT}"
    volumes:
      - qr_db_data:/var/lib/postgresql/data
    networks:
      - qr_net

  auth-service-db:
    image: postgres:latest
    container_name: auth-service-db
    environment:
      POSTGRES_USER: ${AUTH_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_SERVICE_POSTGRES_DB}
      PGPORT: ${AUTH_SERVICE_POSTGRES_PORT}
    env_file:
      - ../.env
    restart: always
    ports:
      - "${AUTH_SERVICE_POSTGRES_PORT}:${AUTH_SERVICE_POSTGRES_PORT}"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - qr_net

  graphite:
    image: graphiteapp/graphite-statsd
    container_name: graphite
    ports:
      - "${CARBON_METRICS_PORT}:${CARBON_METRICS_PORT}"        # TCP порт для отправки метрик
      - "${CARBON_ADDITIONAL_PORT}:${CARBON_ADDITIONAL_PORT}"  # Дополнительный порт Carbon
      - "${CARBON_LISTENER_PORT}:${CARBON_LISTENER_PORT}"      # Carbon порт (листенер)
      - "${GRAPHITE_WEB_PORT}:80"                              # Web интерфейс Graphite
    env_file:
      - ../.env
    volumes:
      - graphite_data:/opt/graphite/storage
    environment:
      - GRAPHITE_STORAGE_DIR=/opt/graphite/storage
    networks:
      - qr_net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    env_file:
      - ../.env
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - graphite
    networks:
      - qr_net

volumes:
  qr_db_data:
  auth_db_data:
  graphite_data:
  grafana_data:

networks:
  qr_net:
    driver: bridge
